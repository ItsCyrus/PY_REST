Metadata-Version: 2.1
Name: incoming
Version: 0.3.1
Summary: JSON validation framework for Python.
Home-page: https://github.com/vaidik/incoming
Author: Vaidik Kapoor
Author-email: kapoor.vaidik@gmail.com
Classifier: Programming Language :: Python
Classifier: Development Status :: 1 - Planning
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
License-File: LICENSE.rst

incoming: JSON validation framework for Python
==============================================

**incoming** is a JSON validation framework.

|Build Status| |Coverage Status|

.. |Build Status| image:: https://travis-ci.org/vaidik/incoming.png
   :target: https://travis-ci.org/vaidik/incoming
.. |Coverage Status| image:: https://coveralls.io/repos/vaidik/incoming/badge.png?branch=master
   :target: https://coveralls.io/r/vaidik/incoming?branch=master

Overview
--------

Validating anything can get really messy. JSON being one of the most used
formats for data exchange, **incoming** aims at solving the problem of
validating JSON with structure and ease.

**incoming** is a small framework for validating JSON. It's up to you where and
how to use it. A common use-case (and the primary reason why I wrote this
framework) is validating incoming JSON when writing HTTP servers.

Features
++++++++

* Classes that can be sub-classed for writing structured validators.
* Basic validators (or `datatypes`) for performing common validations, like
  string, numbers, booleans, lists, nested JSON, etc.
* Allows extending validators (`datatypes`) to write your own.
* Allows writing callables for validating values.
* Captures errors during validation and returns a complete report of errors.
* Allows reporting different errors for different validation test failures for
  the same value.

Installation
------------

Installation is simple.

.. code:: bash

    pip install incoming

Basic Usage
-----------

.. code-block:: python

    import json

    from datetime import date
    from incoming import datatypes, PayloadValidator


    class MovieValidator(PayloadValidator):
        name = datatypes.String()
        rating = datatypes.Function(
            'validate_rating',
            error='Rating must be in between 1 and 10.',
        )
        actors = datatypes.Array()
        is_3d = datatypes.Boolean()
        release_year = datatypes.Function(
            'validate_release_year',
            error='Release year must be in between 1800 and current year.',
        )

        # validation method can be a regular method
        def validate_rating(self, val, *args, **kwargs):
            return isinstance(val, int) and val >= 1 and val <= 10

        # validation method can be a staticmethod as well
        @staticmethod
        def validate_release_year(val, *args, **kwargs):
            return all((
                isinstance(val, int),
                val >= 1800,
                val <= date.today().year,
            ))

    payload = {
        'name': 'Avengers',
        'rating': 5,
        'actors': [
            'Robert Downey Jr.',
            'Samuel L. Jackson',
            'Scarlett Johansson',
            'Mark Ruffalo'
        ],
        'is_3d': True,
        'release_year': 2012
    }
    result, errors = MovieValidator().validate(payload)
    assert result and errors is None, 'Validation failed.\n%s' % json.dumps(errors, indent=2)

    payload = {
        'name': 'Avengers',
        'rating': 11,
        'actors': [
            'Robert Downey Jr.',
            'Samuel L. Jackson',
            'Scarlett Johansson',
            'Mark Ruffalo'
        ],
        'is_3d': 'True',
        'release_year': 9000
    }
    result, errors = MovieValidator().validate(payload)
    assert result and errors is None, 'Validation failed.\n%s' % json.dumps(errors, indent=2)

If you run the above script, you will get::

    Traceback (most recent call last):
      File "code.py", line 67, in <module>
        assert result and errors is None, 'Validation failed.\n%s' % json.dumps(errors, indent=2)
    AssertionError: Validation failed.
    {
      "rating": [
        "Rating must be in between 1 and 10."
      ],
      "is_3d": [
        "Invalid data. Expected a boolean value."
      ],
      "release_year": [
        "Release year must be in between 1800 and current year."
      ]
    }

Documentation
-------------

Documentation is available on `Read The Docs`_.

.. _Read The Docs: http://incoming.readthedocs.org/en/latest/

Tests
-----

Simply run::

    python setup.py test

or::

    py.test incoming

Contributors
------------

- `Vaidik Kapoor <http://github.com/vaidik>`_ (Author)
- `Dhruv Baldawa <http://github.com/dhruvbaldawa>`_
- `James Rowe <http://github.com/JNRowe>`_

Licence
-------

See `LICENCE`_.

.. _LICENCE: https://github.com/vaidik/incoming/blob/master/LICENSE


The MIT License (MIT)

Copyright (c) 2013 Vaidik Kapoor

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


CHANGELOG
---------

Development Version
+++++++++++++++++++

0.3.1
*****

* Documentation changes on using Nested JSON validators. Passing name of nested
  class to `incoming.datatypes.JSON` is now discouraged. This means that the
  inner class has to be correctly scoped. `Read more here <http://
  incoming.readthedocs.org/en/latest/payloadvalidators.html
  #validating-nested-json>`__.

0.3.0
*****

* Pass only the error list of a field in payload to its validator method.
* Pass errors and payload as keyword arguments.
* For fields that are not required and have Function as their type, call the
  validation method/function even if the field is missing in payload.

0.2.6
*****

* Support Python 3.

0.2.5
*****

* Abstract out datatypes that perform just Python type checks to reduce code.

0.2.4
*****

* Fix tests for Python 2.5 and 2.6. Fix README.

0.2.3
*****

* Package setup changes - added classifiers and manifest file.

0.2.1
*****

* First public release of Incoming.


